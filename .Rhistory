runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d <- readRDS("/Users/almeida/Downloads/teste.rds")
length(d)
d
d
dim(d)
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/bfast-explorer')
runApp()
runApp()
1/1004
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.null(data.frame(c(1,2), c(3,4)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NULL %>% class
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
11:10
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
icon(name = "square", lib = "font-awesome", class = "fa-lg")
icon(name = "square-o", lib = "font-awesome", class = "fa-lg")
<i class="far fa-square"></i>
runApp()
HTML("<i class='far fa-square'></i>")
icon(name = "square", lib = "font-awesome", class = "fa-lg")
runApp()
runApp()
runApp()
runApp()
getwd()
unzip("shape-to-BFAST-E.zip")
unzip("shape-to-BFAST-E.zip", exdir = substr("shape-to-BFAST-E.zip", 1, nchar(shape-to-BFAST-E.zip) - 4))
unzip("shape-to-BFAST-E.zip", exdir = substr("shape-to-BFAST-E.zip", 1, nchar("shape-to-BFAST-E.zip") - 4))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
get()
getwd()
runApp()
runApp()
runApp()
tabPanel(
title = "Raster",
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("global-2.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file.path("server-teste.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/teste.R')
runApp()
runApp()
tabPanel(
title = "Map",
icon = icon(name = "map-marker", lib = "font-awesome", class = "fa-lg"),
id = "navbar",
position = "fixed-top",
collapsible = T,
header = {
# load styles.css file with custom styles
tags$head(includeCSS("www/styles.css"))
},
# set up shinyjs
useShinyjs(),
div(
id = "map-leaflet",
# render a leaflet map on the background
leafletOutput(
outputId = "leaf",
height = "100%"
),
# create a toolbar on top of the map
fixedPanel(
id = "map-toolbar",
class = "panel panel-default",
top = 60,
bottom = "auto",
right = 250,
left = 250,
# map search query
fluidRow(
column(
4,
HTML('
<div class="form-group shiny-input-container" style="width: 100%;">
<div class="input-group">
<label class="input-group-btn">
<button id="action_search" style="width: 100%;" type="button" class="btn action-button btn-primary">
<i class="fa fa-search"></i>
</button>
</label>
<input id="select_search" type="text" class="form-control" value="" placeholder="Search for a location..."/>
</div>
</div>
'),
# enable "Enter" key press on textInput to activate the search button
tags$script('
$(document).on("keyup", function (e) {
if (e.keyCode == 13) {
$("#action_search").click();
}
});
')
),
# 'insert shape' button
column(
4,
div(
HTML('
<div class="form-group shiny-input-container" style="width: 100%;">
<div class="input-group">
<label id="help_insertShape" class="input-group-btn">
<span class="btn btn-primary btn-file">
<i class="fa fa-upload"></i>
<input id="file_insertShape" name="file_insertShape" type="file" style="display: none;" accept="application/octet-stream,application/zip,.zip"/>
</span>
</label>
<input type="text" class="form-control" placeholder="Upload a shapefile..." readonly="readonly"/>
</div>
<div id="file_insertShape_progress" class="progress progress-striped active shiny-file-input-progress">
<div class="progress-bar"></div>
</div>
</div>
'),
bsTooltip(
id = "help_insertShape",
title = '<div align="justify"><p>The shape must be compressed into a zip with, at least, the <strong>.shp</strong>, <strong>.shx</strong>, <strong>.dbf</strong>, and <strong>.prj</strong> files.</p> The zip file <strong>must</strong> have the same name as its contents.</div>',
placement = "bottom",
trigger = "hover",
options = list(container = "body")
)
)
),
# 'clear all markers' button
column(
4,
bsButton(
inputId = "action_clearMarkers",
label = "Clear Markers",
style = "danger",
icon = icon(name = "trash", lib = "font-awesome"),
width = "100%"
)
)
),
fluidRow(
# select which satellite products to download
column(
6,
selectInput(
inputId = "select_satGet",
label = NULL,
width = "100%",
choices = c(""),
multiple = T
)
),
# 'get data' button
column(
6,
bsButton(
inputId = "action_getTs",
label = "Get Data",
style = "success",
icon = icon(name = "download", lib = "font-awesome"),
width = "100%"
),
# tooltip with data preprocessing description
bsTooltip(
id = "action_getTs",
title = '<div align="justify"><p>The Landsat "Surface Refle- ctance" (SR) product is, by construction, already atmosphe- rically corrected.</p> In addition, the downloaded data is also filtered for cloud effects by using the CFMask algorithm.</div>',
placement = "bottom",
trigger = "hover",
options = list(container = "body")
)
)
),
# output text with download results
htmlOutput(outputId = "text_getTs")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
br()
bsButton
h1()
div
div()
selectInput(inputId = "pixel_versionLS",
label = "Landsat SR Version",
choices = list("Collection 1" = "new",
"Pre-Collection" = "old"))
runApp()
runApp()
navbarPage()
navbarPage(title = "hue")
navbarPage(title = "hue", position = "fixed-top")
navbarPage(title = "hue", position = "fixed-top")
runApp()
runApp()
runApp()
fluidPage(
position = "fixed-top")
runApp()
runApp()
runApp()
runApp()
fluidPage(
sidebarPanel(
position = "fixed-top",
# Set up shinyjs
useShinyjs(),
fileInput(inputId = "pixel_datafile",
label = "Choose CSV File",
accept = c(".csv")),
helpText("The input data must be a .csv file, with comma sep. There must be three columns: plot (id), lat (latitude) and long (longitude)."),
br(),
checkboxInput("pixel_showMap", "Show points on the map?", FALSE),
textInput(inputId = "pixel_filename",
label = "Downloaded data file name",
value = "downloaded-data"),
selectInput(inputId = "pixel_versionLS",
label = "Landsat SR Version",
choices = list("Collection 1" = "new",
"Pre-Collection" = "old")),
bsButton(
inputId = "pixel_botaoDownload",
label = "Download",
style = "primary",
icon = icon("download", lib = "font-awesome"),
width = "50%"
)
# verbatimTextOutput("teste", placeholder = FALSE)
),
mainPanel(
leafletOutput(
outputId = "pixel_leaf"
)
)
)
tabPanel(
title = "Pixel",
icon = icon(name = "th", lib = "font-awesome", class = "fa-lg"),
fluidPage(
sidebarPanel(
# Set up shinyjs
useShinyjs(),
fileInput(inputId = "pixel_datafile",
label = "Choose CSV File",
accept = c(".csv")),
helpText("The input data must be a .csv file, with comma sep. There must be three columns: plot (id), lat (latitude) and long (longitude)."),
br(),
checkboxInput("pixel_showMap", "Show points on the map?", FALSE),
textInput(inputId = "pixel_filename",
label = "Downloaded data file name",
value = "downloaded-data"),
selectInput(inputId = "pixel_versionLS",
label = "Landsat SR Version",
choices = list("Collection 1" = "new",
"Pre-Collection" = "old")),
bsButton(
inputId = "pixel_botaoDownload",
label = "Download",
style = "primary",
icon = icon("download", lib = "font-awesome"),
width = "50%"
)
# verbatimTextOutput("teste", placeholder = FALSE)
),
mainPanel(
leafletOutput(
outputId = "pixel_leaf"
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
header = {
# load styles.css file with custom styles
tags$head(includeCSS("www/styles.css"))
tags$style(type = "text/css", "body {padding-top: 70px;}")
}
header
tags$style(type = "text/css", "body {padding-top: 70px;}")
tags$head(includeCSS("www/styles.css"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
icon(name = "map-marker", lib = "font-awesome", class = "fa-lg")
runApp()
icon(name = "map-marker", lib = "font-awesome", class = "fa-lg")
paste(icon(name = "map-marker", lib = "font-awesome", class = "fa-lg"))
runApp()
icon(name = "square-o", lib = "font-awesome", class = "fa-lg")
icon(name = "th", lib = "font-awesome", class = "fa-lg")
icon(name = "bar-chart", lib = "font-awesome", class = "fa-lg")
icon(name = "question-circle", lib = "font-awesome", class = "fa-lg")
icon(name = "info-circle", lib = "font-awesome", class = "fa-lg")
runApp()
runApp()
runApp()
runApp()
load("~/Downloads/app-shiny/downloaded-data.rds")
load("~/Downloads/app-shiny/downloaded-data.rds")
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
icon(name = "thumbtack", lib = "font-awesome", class = "fa-lg")
runApp()
runApp()
